---
- name: Check if kube config exists
  stat:
    path: /etc/kubernetes/admin.conf
  register: kube_config

- name: Initialise Kubernetes cluster
  shell: kubeadm init --apiserver-advertise-address=192.168.60.100 --node-name=k8s-master --pod-network-cidr=192.168.61.0/24 --skip-phases=addon/kube-proxy
  # This is a bit dirty, but better than nothing.
  when: kube_config.stat.exists == False

- name: Create .kube directory
  file:
    path: /home/vagrant/.kube/
    owner: vagrant
    group: vagrant
    mode: '0755'
    state: directory

- name: Copy admin config to .kube
  copy:
    remote_src: true
    src: /etc/kubernetes/admin.conf
    dest: /home/vagrant/.kube/config
    owner: vagrant
    group: vagrant
    mode: '0644'

- name: Install metrics server
  become: false
  command: kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml

- name: Set kubelet-insecure-tls for metrics server
  become: false
  command: |
    kubectl patch deployment metrics-server -n kube-system --type='json' -p='[{"op": "add", "path": "/spec/template/spec/containers/0/args/-", "value": "--kubelet-insecure-tls"}]'

- name: Enable host network for metrics server
  become: false
  command: |
    kubectl patch deployment metrics-server -n kube-system --type='json' -p='[{"op": "add", "path": "/spec/template/spec/hostNetwork", "value": true}]'

- name: Download Cilium CLI binaries
  become: false
  get_url:
    url: https://github.com/cilium/cilium-cli/releases/download/v0.15.8/cilium-linux-amd64.tar.gz
    dest: /home/vagrant/cilium-linux-amd64.tar.gz
    checksum: sha256:https://github.com/cilium/cilium-cli/releases/download/v0.15.8/cilium-linux-amd64.tar.gz.sha256sum

- name: Extract Cilium CLI binaries
  unarchive:
    src: /home/vagrant/cilium-linux-amd64.tar.gz
    dest: /usr/local/bin

- name: Install Cilium
  become: false
  command: cilium install --namespace=kube-system --set kubeProxyReplacement=true  --set kubeProxyReplacement=true --set k8sServiceHost=192.168.60.100 --set k8sServicePort=6443

- name: Generate join command
  shell: kubeadm token create --print-join-command
  register: join_command

- name: Store join command to local machine
  local_action: copy content={{ join_command.stdout }} dest=./join-command.sh